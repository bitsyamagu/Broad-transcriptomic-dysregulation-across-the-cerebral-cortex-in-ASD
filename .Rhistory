?mean
useMethod("mean")
UseMethod("mean")
getAnywhere("mean")
getAnywhere('mean')
methods("mean")
getAnywhere('mean.default')
x=c(1,2,2,3,5,6,5)
mean(x)
sum(x[1:7]/7)
sum(x[1:7]/6)
library(gProfileR)
?gProfileR
?gprofiler
library(earth)
?earth
library(limma)
?lmFit
?gls.series
?eBayes
?topTable
t.test(3)
library(cqn)
?cqn
library(clusterProfiler); library(GSEABase); library(biomaRt)
?GSEA
source("https://bioconductor.org/biocLite.R")
library(XML)
biocLite("XML")
data("cortex_mrna")
gene="Necab1"
cellExpDist = data.frame(e=cortex_mrna$exp[gene,],l1=cortex_mrna$annot[colnames(cortex_mrna$exp),]$level1class)
library(EWCE)
biocLite("EWCE")
source("http://bioconductor.org/biocLite.R")
biocLite("EWCE")
R.Version()
install.packages("EWCE")
library(EWCE)
options(stringsAsFactors = F)
source("http://bioconductor.org/biocLite.R")
biocLite("EWCE")
install.packages("EWCE")
tmp = "TEST"
tolower(tmp)
substr(tmp,0,1)
paste(substr(tmp,0,1),tolower(substr(tmp,1,length(tmp))),sep="")
paste(substr(tmp,0,1),tolower(substr(tmp,1,nchar(tmp))),sep="")
paste(substr(tmp,0,1),tolower(substr(tmp,2,nchar(tmp))),sep="")
zhang.datExpr = read.csv("C:/Users/jillh/Dropbox/DHGLab/ArgMouse/proc/zhang_datExpr.cell.avg.csv")
View(zhang.datExpr)
rownames(zhang.datExpr) = zhang.datExpr$X
zhang.datExpr = zhang.datExpr[,-1]
avg = apply(zhang.datExpr,2,mean)
boxplot(avg~colnames(zhang.datExpr))
boxplot(zhang.datExpr)
boxplot(zhang.datExpr,main="Zhang Expression of Cell Types Across Genes")
x=c(0.5,1,1.5,2,2.5)
y=log(x)
plot(y ~ x)
x=c(61,610,1037,2074,3050,4087,5002,6100,7015)
y=c(0.974206,1.16716,1.19879,1.28192,1.30739,1.32019,1.35494,1.36941,1.37505)
plot(y ~ x)
logEstimate = lm(y ~ log(x))
logEstimate
y=c(0,1,2,3,4,5)
x=c(0.1,1.3,1.9,3.2,4.5,4.9)
lm(y~x)
logLik(lm(y~x))
summary(lm(y~x))
test = c(0,1,1,1,2,3,4,4,5,6)
mean(test)
quantile(test)
mean(quantile(test))
mean(quantile(test,n=10))
quantile(test,c(0,0.2,0.4,0.6,0.8,1))
mean(quantile(test,c(0,0.2,0.4,0.6,0.8,1)))
test = rnorm(,n=50)
plot(density(test))
quantile(test)
mean(test)
mean(quantile(test))
mean(quantile(test,c(0,0.2,0.4,0.6,0.8,1)))
mean(quantile(test,c(0,0.33,0.66,1)))
log2(2)
log2(2.5)
log2(3)
2^(-1.5)
log2(0.353)
log2(-0.353)
-2^(1.5)
log2(2)
log2(2.1)
log2(2.2)
log2(2.5)
log2(3)
log2(2.8)
2.8-2
median(test)
test = c(0,0,0,0,0,1,2,2,1,3)
mean(test)
median(test)
quantile(test)
quantile(test,c(0,0.33,0.66,1))
mean(quantile(test))
mean(quantile(test,c(0,0.33,0.66,1)))
sd(test)
sd(test)/mean(test)
test2 = c(test,test)
sd(test)
sd(test2)
mean(test2)
mean(test)
rownames(datMeta_model_perm) = c(1:nrow(datMeta_model_perm))
options(stringsAsFactors = FALSE)
install.packages("devtools")
library(devtools)
build_github_devtools()
devtools::install_github("r-lib/devtools")
Sys.which("make")
options(stringsAsFactors = FALSE)
options(buildtools.check=NULL)
library(devtools)
build_github_devtools()
install.packages("devtools")
install.packages("devtools")
library(devtools)
build_github_devtools()
remotes::install_github("r-lib/pkgbuild")
options(stringsAsFactors = FALSE)
remotes::install_github("r-lib/pkgbuild")
remotes::install_github("r-lib/pkgbuild",force=TRUE)
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
install.packages("devtools")
library(devtools)
build_github_devtools()
library(installr)
install.packages("installr")
library(installr)
updateR()
options(stringsAsFactors = FALSE)
install.packages("BiocManager")
library(BiocManager)
BiocManager::install("limma")
library(limma)
BiocManager::install("edgeR")
library(edgeR)
BiocManager::install("cqn")
library(cqn)
BiocManager::install("biomaRt")
library(biomaRt)
BiocManager::install("WGCNA")
library(WGCNA)
install.packages("devtools")
library(devtools)
devtools::install("C:/Users/jillh/Dropbox/GandalLab/R_mycode/earth-infGenes")
devtools::install("C:/Users/jillh/Dropbox/GandalLab/R_mycode/earth-infGenes")
library(earth)
options(stringsAsFactors = FALSE)
wkdir="C:/Users/jillh/Dropbox/GitHub/"
setwd(paste(wkdir,"Transcriptomic-changes-are-pervasive-across-11-cortical-regions-in-ASD/",sep=""))
??install
rm(list=ls())
load(file="data/01_RNAseqProcessing/02_A_03_NormalizedOutliersRemovedRNAseq.RData")
### Format meta data for input into EARTH/MARS
datMeta$Brain_Bank_Source=gsub("London Brain","Oxford",datMeta$Brain_Bank_Source)
datMeta$Brain_Bank_Source=as.factor(datMeta$Brain_Bank_Source)
datMeta_model = datMeta[,c(2,3,5,6,8,9,14,33,34,35,36,38,40)]
datMeta_model = apply(datMeta_model,2,factor)
datMeta_model=data.frame(datMeta_model)
### For the 30 samples with no PMI, use the average of all other samples
idx_replace=which(is.na(datMeta_model$PMI)==TRUE)
PMI_average=mean(as.numeric(datMeta_model$PMI)[-idx_replace])
datMeta_model$PMI[idx_replace]=PMI_average
datMeta_model$PMI=as.numeric(datMeta_model$PMI)
datMeta_model$Age=as.numeric(datMeta_model$Age)
datMeta_model$RIN=as.numeric(datMeta_model$RIN)
datMeta_model$subject=as.factor(datMeta_model$subject)
datMeta_model$region=factor(datMeta_model$region, levels = c("BA17","BA20-37","BA24",
"BA3-1-2-5","BA38","BA39-40",
"BA4-6","BA41-42-22","BA44-45","BA7","BA9"))
datMeta_model$Diagnosis=factor(datMeta_model$Diagnosis,levels=c("CTL","ASD","Dup15q"))
datMeta_model$Ancestry_Genotype=factor(datMeta_model$Ancestry_Genotype,levels=c("EUR","AFR","ASN","HISPANIC","MIXED"))
datMeta_model$Sex=factor(datMeta_model$Sex,levels=c("M","F"))
colnames(datMeta_model)[c(2,8)]=c("Region","Batch")
datMeta_model$Brain_Bank_Source=as.factor(datMeta_model$Brain_Bank_Source)
datMeta_model$Batch=as.factor(datMeta_model$Batch)
datMeta_model$Read_Length=as.factor(datMeta$Read_Length)
datMeta_model$Age=scale(datMeta_model$Age)
datMeta_model$PMI=scale(datMeta_model$PMI)
datMeta_model$RIN=scale(datMeta_model$RIN)
datMeta_model$Age=as.numeric(datMeta_model$Age)
datMeta_model$PMI=as.numeric(datMeta_model$PMI)
datMeta_model$RIN=as.numeric(datMeta_model$RIN)
datMeta_model$SeqMethod = as.factor(datMeta_model$SeqMethod)
datMeta_model$lobe = as.factor(datMeta_model$lobe)
datMeta_model = datMeta_model[-which(colnames(datMeta_model) %in% c("Read_Length","lobe","SeqMethod"))]
allmat_meta = list()
for(i in c(1:dim(datMeta_model)[2])){
tmp1 = datMeta_model[,i]
allmat_meta[[colnames(datMeta_model)[i]]]=NA
for(j in c(1:dim(datSeq_model)[2])){
tmp2 = datSeq_model[,j]
if(is.factor(tmp1)==TRUE & is.factor(tmp2)==FALSE){
mod=summary(lm(tmp2~tmp1))
r2=mod$adj.r.squared
if(r2 >= 0.95){
allmat_meta[[colnames(datMeta_model)[i]]] = c(allmat_meta[[colnames(datMeta_model)[i]]],colnames(datSeq_model)[j])
}
}else{
mod=summary(lm(tmp1~tmp2))
r2=mod$adj.r.squared
if(r2 >= 0.95){
allmat_meta[[colnames(datMeta_model)[i]]] = c(allmat_meta[[colnames(datMeta_model)[i]]],colnames(datSeq_model)[j])
}
}
}
allmat_meta[[colnames(datMeta_model)[i]]] = allmat_meta[[colnames(datMeta_model)[i]]][-1]
}
set.seed(101788)
allmat_meta_org = allmat_meta
covs_keep = colnames(datSeq_model)
covs_iterate = names(allmat_meta_org)
for(cov in covs_iterate){
print(cov)
if(length(allmat_meta[[cov]])==0){
next
}else{
keep0 = which(allmat_meta[[cov]] %in% covs_keep)
remove = allmat_meta[[cov]][keep0]
covs_keep = covs_keep[-which(covs_keep %in% remove)]
print(length(covs_keep))
}
}
datSeq_model = datSeq_model[,which(colnames(datSeq_model) %in% covs_keep)]
allmat_seq = list()
for(i in c(1:dim(datSeq_model)[2])){
tmp1 = datSeq_model[,i]
allmat_seq[[colnames(datSeq_model)[i]]]=NA
for(j in c(1:dim(datSeq_model)[2])){
tmp2 = datSeq_model[,j]
if(i==j){
next
}else{
mod=summary(lm(tmp1~tmp2))
r2=mod$adj.r.squared
if(r2 >= 0.95){
allmat_seq[[colnames(datSeq_model)[i]]] = c(allmat_seq[[colnames(datSeq_model)[i]]],colnames(datSeq_model)[j])
}
}
}
allmat_seq[[colnames(datSeq_model)[i]]] = allmat_seq[[colnames(datSeq_model)[i]]][-1]
}
norm <- t(scale(t(datExpr),scale=F))
PC <- prcomp(norm,center = FALSE)
varexp <- (PC$sdev)^2 / sum(PC$sdev^2)
topPC <- PC$rotation[,1:15] ## these first 10 explain ~52% of the variance
colnames(topPC) <- paste("PC",c(1:15),"_",(signif(varexp[c(1:15)],2)*100),"%",sep="")
allmat_seq_org = allmat_seq
covs_keep = names(allmat_seq_org)
covs_iterate = names(allmat_seq_org)
for(cov in covs_iterate){
print(cov)
if((cov %in% covs_keep)==FALSE){
next
}
if(length(allmat_seq[[cov]])==0){
next
}else{
keep0 = which(allmat_seq[[cov]] %in% covs_keep)
covs_test = c(cov,allmat_seq[[cov]][keep0])
r2_mat = matrix(NA,nrow=5,ncol=length(covs_test))
rownames(r2_mat)=colnames(topPC)[1:5]
colnames(r2_mat)= covs_test
for(i in c(1:5)){
for(j in c(1:length(covs_test))){
mod = summary(lm(topPC[,i] ~ datSeq_model[,which(colnames(datSeq_model)==covs_test[j])]))
r2_mat[i,j]=mod$adj.r.squared
}
}
r2_sum = apply(r2_mat,2,sum)
max_val = max(r2_sum)
max_cov = names(r2_sum)[which(r2_sum==max_val)]
if(length(max_cov) > 1){
keep = sample(max_cov,1)
}else{
keep = max_cov
}
allmat_seq[[keep]] = allmat_seq[[keep]][-c(1:length(allmat_seq[[keep]]))]
remove = covs_test[-which(covs_test==keep)]
covs_keep = covs_keep[-which(covs_keep %in% remove)]
print(length(covs_keep))
}
}
datSeq_model = datSeq_model[,which(colnames(datSeq_model) %in% covs_keep)]
datMeta_model_org = datMeta_model
datMeta_model = datMeta_model[,-which(colnames(datMeta_model)=="subject")]
save(datMeta_model,datSeq_model,datExpr,file="data/01_RNAseqProcessing/02_A_04_dat4MARS.RData")
datMeta_model = datMeta_model_org
save(datExpr,datMeta,datSeq,datSeq_numeric,datMeta_model,datSeq_model,topPC,rsem_gene_effLen,
file="data/01_RNAseqProcessing/02_A_04_AllDataPreMARS.RData")
save(datExpr,datMeta,datSeq_numeric,datMeta_model,datSeq_model,topPC,rsem_gene_effLen,
file="data/01_RNAseqProcessing/02_A_04_AllDataPreMARS.RData")
BiocManager::install("parallel")
library(parallel)
runMARS <- function(gene.expr, covars, n.predictors=NULL,
n.replicates=1, n.cores=1, allow.interaction=FALSE,
batch.interactions=FALSE,allow.nonlinear=FALSE,cr=10) {
# uses the packages `earth` to determine an appropriate linear model for expression, given
# technical covariates.
# Inputs
#  gene.expr     - The gene expression matrix (genes x samples)
#  covars        - The sample covariate matrix (samples x covariates)
#  n.predictors  - The (maximum) number of predictors to use in the forward earth  model
#  no.cross      - vector of covariates to exclude from cross terms
#
# Returns:
#  earth         - the fitted `earth` object
#  formula       - formula giving the right-hand-size of the covariate-correction LM
#  terms         - the terms included
#  term.imp      - importance for each term: this is the 80th percentile of max(beta)
#  model.matrix  - the model matrix resulting from model.matrix(formula, covars)
gene.expr = t(gene.expr)
binary.terms = apply(covars,2,function(x) {
return(length(levels(as.factor(x)))==2 && min(x)==0 && max(x)==1)})
square.terms = covars[,!binary.terms]^2
colnames(square.terms) = paste0( colnames(square.terms), "^2")
covars = cbind(covars, square.terms)
if(allow.interaction==TRUE) {
degree=2;
} else {
degree=1;
}
allowed.fx <- function(degree, pred, parents, namesx, first) {
if(batch.interactions==FALSE & degree > 1) {
bad.idx <- grep("BATCH", toupper(namesx))
return(!(pred %in% bad.idx || which(parents!=0) %in% bad.idx))
} else {
return(TRUE)
}
}
if(allow.nonlinear==TRUE) {
linear=FALSE;
} else {
linear=TRUE;
}
out = mclapply(1:n.replicates, function(r) {
e = earth(x=covars, y=gene.expr, trace=2, degree=degree,linpreds=linear, allowed=allowed.fx,nfold=cr)
med= apply(abs(e$coefficients),1,median)
beta = data.frame(row.names=1:length(med), var=as.character(names(med)), abs.beta=med, replicate=r,
modfit = paste0("RSS=",e$rss, " RSQ=",e$rsq, " GCV=",e$gcv, " GRSQ=",e$grsq))
all = list("beta"=beta,"e"=e)
}, mc.cores=n.cores)
return(out)
}
load("data/01_RNAseqProcessing/02_A_04_dat4MARS.RData")
datSeq=datSeq_model
rm(datSeq_model)
datMeta=datMeta_model
rm(datMeta_model)
meta_dat=data.frame(datMeta)
all_dat=data.frame(datSeq)
form_meta_dat=paste0(colnames(meta_dat)[c(1:ncol(meta_dat))],collapse=" + ")
form_meta_dat=paste0("~",form_meta_dat,collapse="")
form_all_dat=paste0(colnames(all_dat)[c(1:ncol(all_dat))],collapse=" + ")
form_all_dat=paste0("~0+",form_all_dat,collapse="")
Y = datExpr
rm(datExpr)
X.meta = data.frame(model.matrix(as.formula(form_meta_dat),data=meta_dat))
X.all = data.frame(model.matrix(as.formula(form_all_dat),data=all_dat))
Y = data.frame(Y[,match(rownames(X.meta), colnames(Y))])  ### I know that everything is matched already
X.all=data.frame(X.meta,X.all)
to_keep = !(apply(X.all,2,sd)==0)
X.all = X.all[,to_keep]
output="data/01_RNAseqProcessing/"
if(TRUE | !file.exists(paste0(output,"/02_A_05_MARSOutput.RData")))  {
n.cores = detectCores()
e.all = runMARS(gene.expr = Y, covars = X.all,n.cores = n.cores, n.replicates = 1, allow.interaction = F,batch.interactions=F,allow.nonlinear=F)
save(e.all, file=paste0(output,"/02_A_05_MARSOutput.RData"))
beta_e_all=e.all[[1]]$beta
coef_e_all=e.all[[1]]$e$coefficients
save(beta_e_all,coef_e_all,file=paste0(output,"/02_A_05_MARSOutput_subset.RData"))
}
if(TRUE | !file.exists(paste0(output,"/02_A_05_MARSOutput.RData")))  {
e.all = runMARS(gene.expr = Y, covars = X.all,n.cores = n.cores, n.replicates = 1, allow.interaction = F,batch.interactions=F,allow.nonlinear=F)
save(e.all, file=paste0(output,"/02_A_05_MARSOutput.RData"))
beta_e_all=e.all[[1]]$beta
coef_e_all=e.all[[1]]$e$coefficients
save(beta_e_all,coef_e_all,file=paste0(output,"/02_A_05_MARSOutput_subset.RData"))
}
if(TRUE | !file.exists(paste0(output,"/02_A_05_MARSOutput.RData")))  {
e.all = runMARS(gene.expr = Y, covars = X.all, n.replicates = 1, allow.interaction = F,batch.interactions=F,allow.nonlinear=F)
save(e.all, file=paste0(output,"/02_A_05_MARSOutput.RData"))
beta_e_all=e.all[[1]]$beta
coef_e_all=e.all[[1]]$e$coefficients
save(beta_e_all,coef_e_all,file=paste0(output,"/02_A_05_MARSOutput_subset.RData"))
}
rm(list=ls())
### It is recommended to use the provided CV MARS data to be consistent with the publication.
load("data_user/01_RNAseqProcessing/02_A_04_AllDataPreMARS.RData")
load("data_provided/01_RNAseqProcessing/02_A_05_MARSOutput_subset.RData")
load("data_provided/01_RNAseqProcessing/02_A_05_MARSOutput_CVCompiled.RData")
coef_list=list("coef"=coef_e_all,"cv_rsq"=signif(cv_rsq_all[11],3))
rm(list=ls())
### It is recommended to use the provided CV MARS data to be consistent with the publication.
load("data_user/01_RNAseqProcessing/02_A_04_AllDataPreMARS.RData")
load("data_provided/01_RNAseqProcessing/02_A_05_MARSOutput_subset.RData")
load("data_provided/01_RNAseqProcessing/02_A_05_MARSOutput_CVCompiled.RData")
i=1
dat = rbind(cv_coef_list[[i]])
med_dat=abs(apply(dat,1,median))
plot_dat=data.frame("Coef"=rownames(dat),"Median_Beta"=med_dat)
plot_dat=plot_dat[-grep("(Intercept)",plot_dat[,1]),]
unq_rsq=signif(cv_r2_list[[i]],3)
cv_rsq=signif(cv_rsq_all[[i]],3)
BiocManager::install("ggplot2")
library(ggplot2)
BiocManager::install("gridExtra")
library(gridExtra)
pdf(file="output/01_RNAseqProcessing/02_A_06_MARS_CV_plots.pdf",width=16,height=12)
for(i in c(1:10)){
dat = rbind(cv_coef_list[[i]])
med_dat=abs(apply(dat,1,median))
plot_dat=data.frame("Coef"=rownames(dat),"Median_Beta"=med_dat)
plot_dat=plot_dat[-grep("(Intercept)",plot_dat[,1]),]
unq_rsq=signif(cv_r2_list[[i]],3)
cv_rsq=signif(cv_rsq_all[[i]],3)
g1 <- ggplot(plot_dat, aes(x=reorder(Coef, Median_Beta), y=Median_Beta)) +
geom_bar(stat="identity")  +
coord_flip() +
geom_label(aes(y=Inf,x=-Inf,hjust=1,vjust=-0.1,label=paste0("R^2=",unq_rsq,"; CV R^2=",cv_rsq)),
size=8) +
xlab("Absolute Median Beta") +
ylab("Coefficient") +
ggtitle(paste("Median Beta Across All Genes: Iter ",i)) +
theme(plot.title = element_text(hjust = 0.5,size=28),
axis.text.x =element_text(size=22),
axis.title=element_text(size=26))
grid.arrange(g1)
}
dev.off()
final_coefs=rownames(cv_coef_list[[6]])
cv_rsq_all
final_coefs
final_coefs=c(final_coefs,"RIN","Subject","Region")
final_coefs=final_coefs[-1]
datMeta_model$Region = gsub("-","_",datMeta_model$Region)
datMeta_model$DxReg = as.factor(paste(datMeta_model$Diagnosis,datMeta_model$Region,sep="_"))
mod_meta_cat=data.frame("Subject"=datMeta_model$subject,"DxReg"=datMeta_model$DxReg,
"SeqBatch"=datMeta_model$Batch,
"Sex"=datMeta_model$Sex,
"Ancestry"=datMeta_model$Ancestry_Genotype)
mod_meta_cat_vp=data.frame("Subject"=datMeta_model$subject,
"Diagnosis"=datMeta_model$Diagnosis,
"Region"=datMeta_model$Region,
"SeqBatch"=datMeta_model$Batch,
"Sex"=datMeta_model$Sex,
"Ancestry"=datMeta_model$Ancestry_Genotype)
mod_meta_cont=data.frame("Age"=datMeta_model$Age,"Age_sqd"=(datMeta_model$Age)^2,"PMI"=datMeta_model$PMI,
"RIN"=datMeta_model$RIN,
"picard_gcbias.AT_DROPOUT"=datSeq_model$picard_gcbias.AT_DROPOUT,
"star.deletion_length"=datSeq_model$star.deletion_length,
"picard_rnaseq.PCT_INTERGENIC_BASES"=datSeq_model$picard_rnaseq.PCT_INTERGENIC_BASES,
"picard_insert.MEDIAN_INSERT_SIZE"=datSeq_model$picard_insert.MEDIAN_INSERT_SIZE,
"picard_alignment.PCT_CHIMERAS"=datSeq_model$picard_alignment.PCT_CHIMERAS,
"picard_alignment.PCT_PF_READS_ALIGNED"=datSeq_model$picard_alignment.PCT_PF_READS_ALIGNED,
"star.multimapped_percent"=datSeq_model$star.multimapped_percent,
"picard_rnaseq.MEDIAN_5PRIME_BIAS"=datSeq_model$picard_rnaseq.MEDIAN_5PRIME_BIAS,
"star.unmapped_other_percent"=datSeq_model$star.unmapped_other_percent,
"picard_rnaseq.PCT_USABLE_BASES"=datSeq_model$picard_rnaseq.PCT_USABLE_BASES,
"picard_alignment.PCT_CHIMERAS_sqd"=(datSeq_model$picard_alignment.PCT_CHIMERAS^2),
"star.uniquely_mapped_percent_sqd"=(datSeq_model$star.uniquely_mapped_percent^2))
BiocManager::install("variancePartition")
library(variancePartition)
BiocManager::install("doParallel")
library(doParallel)
cl <- makeCluster(4)
registerDoParallel(cl)
covs_cat=paste0("(1|",colnames(mod_meta_cat_vp),")",collapse=" + ")
covs=c(covs_cat,colnames(mod_meta_cont))
form = paste0(covs,collapse=" + ")
form = paste0("~",form,collapse=" ")
datMeta_model=data.frame(mod_meta_cat,mod_meta_cont)
datMeta_model_vp = data.frame(mod_meta_cat_vp,mod_meta_cont)
datSeq = datSeq_model
cite("variancePartition")
citation("variancePartition")
save(datMeta_model,datMeta,datSeq,datSeq_numeric,
topPC,datExpr,rsem_gene_effLen,file="data_user/01_RNAseqProcessing/02_A_06_AllProcessedData_wModelMatrix.RData")
save(datExpr,form,datMeta_model_vp,file="data_user/01_RNAseqProcessing/02_A_06_VarPartData.RData")
load("data_user/01_RNAseqProcessing/02_A_07_VarPartResults.RData")
vp <- sortCols( varPart )
pdf(file="output/01_RNAseqProcessing/02_A_07_varPartPlot.pdf",width=18,height=12)
plotPercentBars( vp[1:10,] )
plotVarPart(vp)
dev.off()
median(vp$Residuals) # 0.3054697
median(vp$Diagnosis) # 0.004216617
rm(list=ls())
load("data_user/01_RNAseqProcessing/02_A_06_AllProcessedData_wModelMatrix.RData")
dim(datExpr)
BiocManager::install("lmerTest")
library(lmerTest)
citation("lmerTest")
d=24500
max=2000
ceiling(d/max)
d=c(1:nrow(datExpr))
d
d1 <- split(d, ceiling(d/max))
d1
