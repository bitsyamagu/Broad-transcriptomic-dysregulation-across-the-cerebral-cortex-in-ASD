mat[order(mat[,1]),]
mat
?cor.test
mat = rbind(c(0,1,1,2),c(3,5,8,13),c(0,2,2,4),c(6,10,16,26))
mat
mat2 = log2(mat+1)
mat2
?lm
t.test()
v1 = rnorm(10)
v2 = rnorm(10)
t.test(v1,v2)
v = cbind(v1,v2)
lm(v~c(rep(0,10),rep(1,10)))
c(rep(0,10),rep(1,10))
lm(v~c(0,1))
lm(v[1,]~c(0,1))
obj = apply(lm(v~c(0,1)))
obj = apply(v,1,lm(~c(0,1)))
obj = apply(v,1,lm(y~c(0,1)))
v
obj = apply(v,1,function(y) lm(y~c(0,1)))
summary(obj)
obj[[1]]
summary(obj[[1]])
t.test(v1,v2)
lm(c(v1,v2)~c(rep(0,10),rep(1,10)))
summary(lm(c(v1,v2)~c(rep(0,10),rep(1,10))))
t.test(v1,v2)
load("C:/Users/jillh/Dropbox/NovitchLab/organoidRNAseq/DGE/A-C_consensus_DGE.RData")
View(up_genes)
load("C:/Users/jillh/Dropbox/NovitchLab/organoidRNAseq/DGE/limma_diffGenes.RData")
sig_list[[1]]
library(WGCNA)
test=cor(c(1,2,3,4),c(5,6,7,8))
?cor
test=bicor(c(1,2,3,4),c(5,6,7,8))
?bicor
cor.test(c(1,2,3,4),c(5,6,7,8))
cor.test(c(1,2,3,4),c(5,6,7,8),method="spearman")
cor.test(c(1,2,3,4),c(5,6,7,8),method="bicor")
cor.test(c(1,2,3,4),c(5,6,7,8),method="spearman")
plot(c(1,2,3,4),c(5,6,7,8))
cor.test(c(1,2,3,4,5),c(5,6,7,8,9),method="spearman")
lm(c(1,2,3,4) ~ c(4,5,6,7))
summary(lm(c(1,2,3,4) ~ c(4,5,6,7)))
?cbind
?head
?qt
y=c(35,34,38,35,37)
n=length(y)
se = sd(y)/sqrt(n)
int.50 = mean(y) + qt(c(0.25,0.75),n-1)*se
qt(c(0.25,0.75),n-1)
library(fmsb)
?NagelkerkeR2
library(WGCNA)
source("http://bioconductor.org/biocLite.R")
biocLite("WGCNA")
library(WGCNA)
biocLite("scales")
library(WGCNA)
biocLite("tibble")
library(WGCNA)
biocLite("checkmate")
library(WGCNA)
biocLite("htmltools")
library(WGCNA)
biocLite("knitr")
library(WGCNA)
library(lumi)
biocLite("XML")
library(WGCNA)
library(lumi)
biocLite("reshape")
library(lumi)
biocLite("mclust")
library(lumi)
biocLite("openssl")
library(lumi)
biocLite("mixOmics")
biocLite("mixOmics")
biocLite("shiny")
biocLite("httpuv")
biocLite("shiny")
biocLite("httpuv")
?biocLite
install.packages("https://cran.rstudio.com/bin/windows/contrib/3.2/httpuv_1.3.5.zip")
install.packages("lumi")
biocLite("lumi")
library(lumi)
biocLite("mixOmics")
biocLite("httpuv")
install.packages(c("Rcpp", "httpuv", "shiny"))
üëç 5 üëé 1
install.packages(c("Rcpp", "httpuv", "shiny"))
biocLite("Rcpp")
rm(list=ls()); options(stringsAsFactors=F)
source("http://bioconductor.org/biocLite.R")
library(WGCNA)
biocLite("Rcpp")
biocLite("lumi")
library(WGCNA)
library("lumi")
biocLite("httpuv")
biocLite("mixOmics")
biocLite("shiny")
library(installr)
biocLite("installR")
biocLite("installr")
library(installr)
updateR()
11+10+9+8+7+6+5+4+3+2+1
1-((1/7)*(2/7)*(3/7)*(4/7)*(5/7)*(6/7))
1-((2/7)*(3/7)*(4/7)*(5/7)*(6/7))
1-((1/7)*(2/7)*(3/7)*(4/7)*(5/7))
((1/7)*(2/7)*(3/7)*(4/7)*(5/7)*(6/7))
sqrt(0.33)
1-sqrt(0.33)
(1-sqrt(0.33))^2
1-0.181-0.33
0.25^2
0.25*0.25
1-(0.25^3)-(0.5*(0.25^2))-((0.5^2)*0.25)-(0.5^3)
sqrt(0.25)
0.5^2
0.33-(0.25)-0.5
0.77-0.25
0.52/.25
0.5/.25
2.08*0.25
0.25/0.77
0.25/0.766
((0.25)^3)+((0.25^2)*0.5)+((0.25^2)*0.25)+(0.25*0.5*0.25)+(0.25*(0.25^2))+(0.25*(0.5^2))
1-0.766
1-(0.75^3)
0.25/0.578
(0.25*(0.75^2))+((0.25^2)*0.75)+(0.25^3)
(0.75^3)
0.75^2
(0.25*0.75*0.75)
(0.25*0.25*0.75)
(0.25*0.25*0.25)
(0.75*0.75*0.75)
0.42+0.02+0.05+0.14
(0.75^3)
(0.25^3)
(0.25*(0.75^2))
(0.25*(0.75^2))*3
(0.75*(0.25^2))*3
0.42+0.02+0.42+0.14
1-(0.75^3)
0.25/0.58
(0.75^3)
library(DESe12)
library(DESeq2)
sessionInfo
sessionInfo()
gse <- getGEO("GSE20295", GSEMatrix =TRUE,getGPL=FALSE)
gse <- getGEO("GSE20295", GSEMatrix =TRUE,getGPL=FALSE)
options(stringsAsFactors = FALSE)
library(affy) ### Load your library every time
library(GEOquery)
library(limma)
library(WGCNA)
library(sva)
library(biomaRt)
library(Biobase)
setwd("C:/Users/Jill/Dropbox/DHGLab/Tutorials/Microarray/")
vector <- c(0,1,1,2,3,4,)
vector <- c(0,1,1,2,3,4)
vector
vector2 <- c(2,3,4,5,6,7)
plot(vector,vector2)
matrix <-cbind(vector,vector2)
View(matrix)
matrix
matrix[,1]
matrix[2,1]
matrix [4,2]
?NagelkerkeR2
??NagelkerkeR2
library(limma)
?voom
?lmFit
vec1=c(1,2,3,4,5)
vec2=c(5,3,6,7,8)
anova(lm(vec1~vec2))
vec3=c(6,7,8,3,4)
cond=cbind(vec2,vec1)
anova(lm(vec3~cond))
?prcomp
test1=c(1,2,3,7,8,9)
test2=c(1,2,3,7,8,9)
test_mat=cbind(test1,test2)
obj=prcomp(test_mat)
obj=prcomp(t(test_mat))
plot(test1,test2)
plot(test1,obj$rotation[,1])
test_mat
obj
test2=c(11,12,13,17,18,19)
test_mat=cbind(test1,test2)
obj=prcomp(test_mat)
obj=prcomp(t(test_mat))
plot(test1,obj$rotation[,1])
obj
?prcomp
plot(test1,test2)
plot(obj$rotation[,1],obj$rotation[,2])
obj=prcomp(test_mat)
obj
obj=prcomp(t(test_mat))
obj
plot(obj)
obj=prcomp(t(test_mat),center = FALSE)
obj
plot(obj$rotation[,1],obj$rotation[,2])
test1=c(1,2,3,7,8,9)
test2=test1+2
mat=rbind(test1,test2)
pc=prcomp(mat)
pc$rotation
pc2=prcomp(t(mat))
pc2$
pc=prcomp(mat,center=FALSE)
pc2=prcomp(t(mat),center=FALSE)
pc$rotation
pc2$rotation
plot(pc$rotation[,1],pc$rotation[,2])
mat
test2=c(9,10,11,5,4,3)
mat=rbind(test1,test2)
plot(test1,test2)
pc=prcomp(mat,center=FALSE)
pc$rotation
?mean
useMethod("mean")
UseMethod("mean")
getAnywhere("mean")
getAnywhere('mean')
methods("mean")
getAnywhere('mean.default')
x=c(1,2,2,3,5,6,5)
mean(x)
sum(x[1:7]/7)
sum(x[1:7]/6)
library(gProfileR)
?gProfileR
?gprofiler
library(earth)
?earth
library(limma)
?lmFit
?gls.series
?eBayes
?topTable
t.test(3)
library(cqn)
?cqn
library(clusterProfiler); library(GSEABase); library(biomaRt)
?GSEA
source("https://bioconductor.org/biocLite.R")
library(XML)
biocLite("XML")
data("cortex_mrna")
gene="Necab1"
cellExpDist = data.frame(e=cortex_mrna$exp[gene,],l1=cortex_mrna$annot[colnames(cortex_mrna$exp),]$level1class)
library(EWCE)
biocLite("EWCE")
source("http://bioconductor.org/biocLite.R")
biocLite("EWCE")
R.Version()
install.packages("EWCE")
library(EWCE)
options(stringsAsFactors = F)
source("http://bioconductor.org/biocLite.R")
biocLite("EWCE")
install.packages("EWCE")
tmp = "TEST"
tolower(tmp)
substr(tmp,0,1)
paste(substr(tmp,0,1),tolower(substr(tmp,1,length(tmp))),sep="")
paste(substr(tmp,0,1),tolower(substr(tmp,1,nchar(tmp))),sep="")
paste(substr(tmp,0,1),tolower(substr(tmp,2,nchar(tmp))),sep="")
zhang.datExpr = read.csv("C:/Users/jillh/Dropbox/DHGLab/ArgMouse/proc/zhang_datExpr.cell.avg.csv")
View(zhang.datExpr)
rownames(zhang.datExpr) = zhang.datExpr$X
zhang.datExpr = zhang.datExpr[,-1]
avg = apply(zhang.datExpr,2,mean)
boxplot(avg~colnames(zhang.datExpr))
boxplot(zhang.datExpr)
boxplot(zhang.datExpr,main="Zhang Expression of Cell Types Across Genes")
x=c(0.5,1,1.5,2,2.5)
y=log(x)
plot(y ~ x)
x=c(61,610,1037,2074,3050,4087,5002,6100,7015)
y=c(0.974206,1.16716,1.19879,1.28192,1.30739,1.32019,1.35494,1.36941,1.37505)
plot(y ~ x)
logEstimate = lm(y ~ log(x))
logEstimate
y=c(0,1,2,3,4,5)
x=c(0.1,1.3,1.9,3.2,4.5,4.9)
lm(y~x)
logLik(lm(y~x))
summary(lm(y~x))
test = c(0,1,1,1,2,3,4,4,5,6)
mean(test)
quantile(test)
mean(quantile(test))
mean(quantile(test,n=10))
quantile(test,c(0,0.2,0.4,0.6,0.8,1))
mean(quantile(test,c(0,0.2,0.4,0.6,0.8,1)))
test = rnorm(,n=50)
plot(density(test))
quantile(test)
mean(test)
mean(quantile(test))
mean(quantile(test,c(0,0.2,0.4,0.6,0.8,1)))
mean(quantile(test,c(0,0.33,0.66,1)))
log2(2)
log2(2.5)
log2(3)
2^(-1.5)
log2(0.353)
log2(-0.353)
-2^(1.5)
log2(2)
log2(2.1)
log2(2.2)
log2(2.5)
log2(3)
log2(2.8)
2.8-2
median(test)
test = c(0,0,0,0,0,1,2,2,1,3)
mean(test)
median(test)
quantile(test)
quantile(test,c(0,0.33,0.66,1))
mean(quantile(test))
mean(quantile(test,c(0,0.33,0.66,1)))
sd(test)
sd(test)/mean(test)
test2 = c(test,test)
sd(test)
sd(test2)
mean(test2)
mean(test)
rownames(datMeta_model_perm) = c(1:nrow(datMeta_model_perm))
options(stringsAsFactors = FALSE)
install.packages("devtools")
library(devtools)
build_github_devtools()
devtools::install_github("r-lib/devtools")
Sys.which("make")
options(stringsAsFactors = FALSE)
options(buildtools.check=NULL)
library(devtools)
build_github_devtools()
install.packages("devtools")
install.packages("devtools")
library(devtools)
build_github_devtools()
remotes::install_github("r-lib/pkgbuild")
options(stringsAsFactors = FALSE)
remotes::install_github("r-lib/pkgbuild")
remotes::install_github("r-lib/pkgbuild",force=TRUE)
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
install.packages("devtools")
library(devtools)
build_github_devtools()
library(installr)
install.packages("installr")
library(installr)
updateR()
?lm
?summary
?summary.lm
?lm
?lm.fit
1/6
4/24
4/24
1/5
101 %*% 100
101 *%* 100
101%100
101 % 100
105 %% 100
100 %% 100
t.test(c(0.8,0.82),c(0.76,0.77))
shapiro.test(c(0.8,0.82))
ks.test(c(0.8,0.82))
?ks.test
ks.test(c(0.8,0.82),"pnorm")
ks.test(c(0.8,0.81),"pnorm")
test = rnorm(10)
ks.test(test,"pnorm")
ks.test(1,"pnorm")
ks.test(10,"pnorm")
ks.test(c(108,108.2),"pnorm")
?shapiro.test
?combinations
??combination
?combos
library(gtools)
combinations(546, 500, v=1:546, set=TRUE, repeats.allowed=FALSE)
?combinations
options(expressions=1e5)
combinations(546, 500, v=1:546, set=TRUE, repeats.allowed=FALSE)
options(expressions=1e9)
options(expressions=1e6)
options(expressions=1e5)
cmat = combinations(546, 500, v=1:546, set=TRUE, repeats.allowed=FALSE)
cmat = combinations(546, 500)
library(gtools)
combinations(5,3)
??stratifiedBootstrap
library(devtools)
devtools::install_github("SydneyBioX/scdney", build_opts = c("--no-resave-data", "--no-manual"))
BiocManager::install("rlang")
library(scDC)
8*4
tmp = read.csv("C:/Users/jillh/Dropbox/GitHub/ASD_pancortical_analysis/processing/04_WGCNA/A07_scRNAseq/GLM_results_snRNAseq_Bootstrap_EndoRef.csv")
tmp$bonf.p = p.adjust(tmp$p.value)
write.csv(tmp,file="C:/Users/jillh/Dropbox/GitHub/ASD_pancortical_analysis/processing/04_WGCNA/A07_scRNAseq/GLM_results_snRNAseq_Bootstrap_EndoRef_wBonf.csv")
ls()
list.files()
options(stringsAsFactors = FALSE)
wkdir="C:/Users/jillh/Dropbox/GitHub/"
setwd(paste(wkdir,"Broad-transcriptomic-dysregulation-across-the-cerebral-cortex-in-ASD/",sep=""))
library(limma); library(statmod); library(WGCNA)
load("data_provided/02_DEGenesIsoforms/02_01_B_AllProcessedData_wModelMatrix.RData")
dim(datExpr)
View(datMeta_model)
rm(list=ls())
load("data_provided/01_RNAseqProcessing/01_02_A_01_RawData.RData")
View(datMeta)
load("data_provided/02_DEGenesIsoforms/02_04_A_WholeCortex_DGE_logFC.RData")
rm(list=ls())
options(stringsAsFactors = FALSE)
wkdir="C:/Users/jillh/Dropbox/GitHub/"
setwd(paste(wkdir,"Broad-transcriptomic-dysregulation-across-the-cerebral-cortex-in-ASD/",sep=""))
load("data_provided/03_TRI/03_01_A_AllProcessedData_wModelMatrix.RData") ### produced by 01_02_A_CountsProcessing.R, section 6
load("data_provided/03_TRI/03_01_A_RegressedExpression_TRI.RData") ### produced by 01_02_A_CountsProcessing.R, section 8
datMeta_model = data.frame(datMeta_model,"Region"=as.factor(datMeta$region),"Diagnosis"=as.factor(datMeta$Diagnosis))
cont_mat=t(combn(paste(unique(datMeta_model$Region),sep=""), 2))
colnames(cont_mat)=c("Region1","Region2")
idx_comp_all=list()
for(i in c(1:nrow(cont_mat))){
idx=which(datMeta_model$Region==cont_mat[i,1] | datMeta_model$Region==cont_mat[i,2])
datMeta_comp=datMeta_model[idx,]
for(sub in unique(datMeta_comp$Subject)){
length = length(unique(datMeta_comp$Region[which(datMeta_comp$Subject==sub)]))
if(length < 2 ){
datMeta_comp=datMeta_comp[-which(datMeta_comp$Subject==sub),]
}
}
idx_comp=list()
for(dx in c("ASD","CTL")){
idx2=which(datMeta_comp$Diagnosis==dx)
datMeta_comp_dx=datMeta_comp[idx2,]
idx_keep=which(duplicated(datMeta_comp_dx$Subject)==TRUE)
subs_keep=datMeta_comp_dx$Subject[idx_keep]
idx_comp[[dx]]=which(datMeta_model$Subject %in% subs_keep & (datMeta_model$Region==cont_mat[i,1] | datMeta_model$Region==cont_mat[i,2]) )
sub_xtra_remove=names(table(datMeta_model$Subject[idx_comp[[dx]]]))[which(table(datMeta_model$Subject[idx_comp[[dx]]]) > 2)]
if(length(sub_xtra_remove)==0){
next
}
tmp0=datMeta_model[idx_comp[[dx]],]
idx_remove=which(tmp0$Subject %in% sub_xtra_remove)
tmp=tmp0[idx_remove,]
tmp=tmp[order(tmp$Subject),]
dup_samps=NA
for(samp in unique(tmp$Subject)){
dup=which(duplicated(tmp$Region[which(tmp$Subject==samp)])==TRUE)
dup_samps=c(dup_samps,paste(tmp$Subject[which(tmp$Subject==samp)][dup],
tmp$Region[which(tmp$Subject==samp)][dup],
tmp$picard_rnaseq.PCT_INTERGENIC_BASES[which(tmp$Subject==samp)][dup],sep="_"))
}
dup_samps=dup_samps[-1]
idx_remove2=NA
for(dup in dup_samps){
dup_string=strsplit(dup,split="_")
idx_remove2=c(idx_remove2,
which(tmp0$Subject==dup_string[[1]][1] &
tmp0$Region==dup_string[[1]][2] &
tmp0$picard_rnaseq.PCT_INTERGENIC_BASES==dup_string[[1]][3]))
}
idx_remove2=idx_remove2[-1]
idx_comp[[dx]]=idx_comp[[dx]][-idx_remove2]
}
idx_comp_all[[paste(cont_mat[i,1],cont_mat[i,2],sep=" - ")]]=c(idx_comp[["CTL"]],idx_comp[["ASD"]])
}
n_vec_asd <- n_vec_ctl <- rep(NA,55)
names(n_vec_asd) <- names(n_vec_ctl) <- names(idx_comp_all)
for(comp in names(idx_comp_all)){
datMeta_comp=datMeta_model[idx_comp_all[[comp]],]
datMeta_unq=datMeta_comp[!duplicated(datMeta_comp$Subject),]
asd_subs=length(datMeta_unq$Subject[which(datMeta_unq$Diagnosis=="ASD")])
ctl_subs=length(datMeta_unq$Subject[which(datMeta_unq$Diagnosis=="CTL")])
n_vec_asd[comp]=asd_subs
n_vec_ctl[comp]=ctl_subs
}
save(idx_comp_all,n_vec_asd,n_vec_ctl,file="data_user/03_TRI/03_01_A_01_Permutation_Index.RData")
save(datMeta_model,file="data_user/03_TRI/03_01_A_01_datMetaModel_TRI.RData")
qnorm(0.975)
rm(list=ls())
load("C:/Users/jillh/Dropbox/GitHub/ASD_pancortical_analysis/processing/03_DGE/A04_CP_mat_TrueSamples.RData")
rm(list=ls())
